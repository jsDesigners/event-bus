class e{constructor(){this.events={}}static create(){return t}addEventListener(e,t,s,...n){void 0===this.events[e]&&(this.events[e]=[]),this.events[e].push({scope:s,callback:t,args:n})}removeEventListener(e,t,s){if(void 0===this.events[e])return;this.events[e]=this.events[e].filter(e=>e.scope!==s||e.callback!==t)}has(e,t,s){if(void 0===this.events[e])return!1;let n=this.events[e].length;if(void 0===t&&void 0===s)return n>0;return this.events[e].some(e=>{const n=!s||e.scope===s,o=e.callback===t;if(n&&o)return!0})}dispatch(e,t,...s){if(void 0===this.events[e])return;let n={type:e,target:t};const o=this.events[e].slice();for(const e of o)e&&e.callback&&e.callback.apply(e.scope,[n,...s,...e.args])}debug(){let e="";for(const[t,s]of Object.entries(this.events))for(const n of s){e+=`${n.scope&&n.scope.constructor.name||"Anonymous"} listening for "${t}"\n`}return e}}const t=new e;export default e;export{e as EventBus};
//# sourceMappingURL=eventbus.esm.min.js.map
